# Подсчитать, сколько было выделено памяти под переменные в ранее разработанных программах в рамках первых трех уроков.
# Проанализировать результат и определить программы с наиболее эффективным использованием памяти.
# Для анализа возьмите любые 1-3 ваших программы.
# Результаты анализа вставьте в виде комментариев к коду.

# Анализ программы из урока 3:
# Найти максимальный элемент среди минимальных элементов столбцов матрицы."

import sys
import ctypes
import struct
import random


def analysis(bet):

    print(f'Для переменной {bet}', f'Место на полке: {id(bet)}, размер: {sys.getsizeof(bet)}.', sep=' -*- ')

    if hasattr(bet, '__iter__'):
        if hasattr(bet, 'items'):
            for value in bet.items():
                analysis(value)
        elif not isinstance(bet, str):
            for i in bet:
                analysis(i)


# arr = [[random.randint(1, 50) for _ in range(3)] for _ in range(3)]
arr = [[random.uniform(1.9, 2.5) for _ in range(3)] for _ in range(3)]

for lines in arr:
    print(lines)
line_max = 0

for j in range(3):
    col_min = 50
    for i in range(3):
        if arr[i][j] < col_min:
            col_min = arr[i][j]
    if col_min > line_max:
        line_max = col_min
print('Максимальный элемент среди минимальных элементов столбцов матрицы: {}'.format(line_max))

print(analysis(arr))

# Результат анализа матрицы с целыми числами:

# Для переменной [[49, 10, 23], [50, 36, 23], [36, 38, 12]] -*- Место на полке: 2176503385736, размер: 96.
# Для переменной [49, 10, 23] -*- Место на полке: 2176503384712, размер: 96.
# Для переменной 49 -*- Место на полке: 140720212204064, размер: 28.
# Для переменной 10 -*- Место на полке: 140720212202816, размер: 28.
# Для переменной 23 -*- Место на полке: 140720212203232, размер: 28.
# Для переменной [50, 36, 23] -*- Место на полке: 2176503397832, размер: 96.
# Для переменной 50 -*- Место на полке: 140720212204096, размер: 28.
# Для переменной 36 -*- Место на полке: 140720212203648, размер: 28.
# Для переменной 23 -*- Место на полке: 140720212203232, размер: 28.
# Для переменной [36, 38, 12] -*- Место на полке: 2176504766792, размер: 96.
# Для переменной 36 -*- Место на полке: 140720212203648, размер: 28.
# Для переменной 38 -*- Место на полке: 140720212203712, размер: 28.
# Для переменной 12 -*- Место на полке: 140720212202880, размер: 28.

# Результат анализа матрицы с числами с плавающей точкой:

# Для переменной [[2.1086291600818377, 1.903172755753403, 2.386447039855134], [2.1193322348776924, 2.1064226738190883, 2.4158249696579346], [1.967980041729886, 2.3969663476939793, 2.3533439628479536]] -*- Место на полке: 1420637965960, размер: 96.
# Для переменной [2.1086291600818377, 1.903172755753403, 2.386447039855134] -*- Место на полке: 1420637964936, размер: 96.
# Для переменной 2.1086291600818377 -*- Место на полке: 1420635845112, размер: 24.
# Для переменной 1.903172755753403 -*- Место на полке: 1420635844872, размер: 24.
# Для переменной 2.386447039855134 -*- Место на полке: 1420635845136, размер: 24.
# Для переменной [2.1193322348776924, 2.1064226738190883, 2.4158249696579346] -*- Место на полке: 1420637982152, размер: 96.
# Для переменной 2.1193322348776924 -*- Место на полке: 1420635845280, размер: 24.
# Для переменной 2.1064226738190883 -*- Место на полке: 1420635845304, размер: 24.
# Для переменной 2.4158249696579346 -*- Место на полке: 1420635846744, размер: 24.
# Для переменной [1.967980041729886, 2.3969663476939793, 2.3533439628479536] -*- Место на полке: 1420639346824, размер: 96.
# Для переменной 1.967980041729886 -*- Место на полке: 1420635846768, размер: 24.
# Для переменной 2.3969663476939793 -*- Место на полке: 1420635846792, размер: 24.
# Для переменной 2.3533439628479536 -*- Место на полке: 1420635846816, размер: 24.

# 64-разрядная ОС, python 3.7